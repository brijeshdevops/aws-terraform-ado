trigger:
- none

pool:
  name: AWS
#  vmImage: 'AWS'

#variables:
#  - template: config.yaml
#  - template: variables.yaml
#  - template: common-variables.yaml

parameters:

#- name: serviceArmAws
#  displayName: Select AWS Service Connection
#  type: string

- name: region
  displayName: Select AWS Region
  default: us-east-1
  type: string
  values:
    - us-east-1
    - us-east-2

- name: terraformBackend
  displayName: Terraform Backend S3 Bucket
  default: lab-working-bucket
  type: string

- name: projectName
  displayName: Enter Project Name
  default: monitoring
  type: string

- name: vpcId
  displayName: Enter exiting VPC ID
  default: vpc-03c8e6332bacf734d
  type: string

- name: envType
  displayName: Select Type of Environment
  default: dev
  type: string
  values:
    - dev
    - test
    - prod

- name: sshKeyPair
  displayName: Enter existing SSH Key Pair Name
  default: eks-9154
  type: string

- name: destroyResource
  displayName: Do you want to destroy the resources?
  default: false
  type: boolean
  values:
    - true
    - false

variables:
  projectName: ${{ parameters.projectName }}
#  serviceArmAws: ${{ parameters.serviceArmAws }}
  envType: ${{ parameters.envType }}
  sshKeyPair: ${{ parameters.sshKeyPair }}
  terraformDir: terraform-eks
  terraformBackend: ${{ parameters.terraformBackend }}
  region: ${{ parameters.region }}
  vpcId: ${{ parameters.vpcId }}

jobs:

- job: terraform
  displayName: Run Terraform
  steps:

#  - powershell: |
#      aws sts get-caller-identity
#
#      Add-Content $(terraformDir)/terraform.tfvars "`n"
#      Add-Content $(terraformDir)/terraform.tfvars 'project_name = "$(projectName)"'
#      Add-Content $(terraformDir)/terraform.tfvars 'env_type = "$(envType)"'
#      Add-Content $(terraformDir)/terraform.tfvars 'vpc_id = "$(vpcId)"'
#      Add-Content $(terraformDir)/terraform.tfvars 'node_ssh_key = "$(sshKeyPair)"'
#      echo 'Reading Terraform Variables....'
#      Get-Content -Path $(terraformDir)/terraform.tfvars
#
#      cd $(terraformDir)
#      ls
#
#    name: setVariables
#    displayName: Setting Variables

  - powershell: |
      cd $(terraformDir)
      terraform init
    name: terraformInit
    displayName: Terraform Init

  - powershell: |
      cd $(terraformDir)
      terraform plan -var 'project_id="$(projectName)"' -var 'env_type="$(envType)"' -var 'vpc_id="$(vpcId)"' -var 'node_ssh_key="$(sshKeyPair)"'
    name: terraformPlan
    displayName: Terraform Plan

  - powershell: |
      cd $(terraformDir)
      terraform apply -auto-approve -var 'project_id="$(projectName)"' -var 'env_type="$(envType)"' -var 'vpc_id="$(vpcId)"' -var 'node_ssh_key="$(sshKeyPair)"'
    name: terraformApply
    displayName: Terraform Plan


  - powershell: |
      cd $(terraformDir)
      terraform destroy -auto-approve -var 'project_id="$(projectName)"' -var 'env_type="$(envType)"' -var 'vpc_id="$(vpcId)"' -var 'node_ssh_key="$(sshKeyPair)"'
    name: terraformDestroy
    displayName: Terraform Destroy
    condition: and(succeeded(), eq('${{ parameters.destroyResource }}', true))


#  - powershell: |
#      cd $(terraformDir)
#      terraform destroy -auto-approve
#    name: terraformDestroy
#    displayName: Terraform Destroy

#  - task: TerraformTaskV1@0
#    displayName: Terraform Init (AWS)
#    inputs:
#      provider: 'aws'
#      command: 'init'
#      region: '$(region)'
#      backendServiceAWS: '$(serviceArmAws)'
#      backendAWSBucketName: '$(terraformBackend)'
#      backendAWSKey: 'terraform.tfstate'
#      workingDirectory: '$(terraformDir)'
#
#  - task: TerraformTaskV1@0
#    displayName: Terraform Plan (AWS)
#    inputs:
#      provider: 'aws'
#      command: 'plan'
#      region: '$(region)'
#      environmentServiceNameAWS: '$(serviceArmAws)'
#      workingDirectory: '$(terraformDir)'
